/*
   //(o) gastonaDoc_source notesDevelopment_sqlite

   ========================================================================================
   ================ documentation for WelcomeGastona.gast =================================
   ========================================================================================

#gastonaDoc#

   <docType>    z Notes about development
   <name>       " 4-Utililies and demo applications"
   <groupInfo>
   <javaClass>
   <importance> 2
   <desc>       //Some internal utilities and demo applications


   <help>
      //Utilities
      //-------------------
      //gastona.jar include some scripts that can be called directly using the path of its location.
      //
      //  --- ARCES: (META-GASTONA/utilApp/arces/arces.gast)
      //
      //  Arces is a viewer of sqlite databases and, in particular, the ones usually generated by gastona.
      //  If the database has table connections (special gastona tabla called __dbMore_connections), these are read
      //  and represented into a tree where the user can choose fields and connected fields
      //  and the resulting query performing the needed joins is generated.
      //
      //  The script accepts one parameter which is the database file name. As an example
      //  a script that opens arces with a database called midata.db can be written as
      //
      //       #listix#
      //           <main> GAST, META-GASTONA/utilApp/arces/arces.gast, midata.db
      //
      //  --- XMELON: (META-GASTONA/utilApp/xmelon/xmelon.gast)
      //
      //  Xmelon as utility is a GUI application that uses the listix command XMELON allowing
      //  the user to parse either a single file or an entire directory and its subdirectories
      //  containing files either of XML format or JSON. Then calls XMELON command to generate
      //  the database. The tool also permits explore the database in a similar way as it is
      //  done by Arces.gast.
      //
      //  Currently the script does not accept any parameter and stores the resulting database
      //  only temporarily. Adapting the script to use a given database name and, for instance,
      //  show the generated SQL queries when exploring the tables is quite trivial and it is left
      //  as exercise. A script to call xmelon utility can be
      //
      //       #listix#
      //           <main> GAST, META-GASTONA/utilApp/xmelon/xmelon.gast
      //
      //Demo applications
      //-------------------
      //
      // --- Mando Pictures (see tab samples)
      //
      // This little sample demonstrates how simple can be control your PC(*1) remotely
      // using the command micoHttp.
      //
      // The sample is a quite trivial picture viewer (next, previous) that explore all
      // pictures found in the folder (home)/Pictures, then starts a http server through micoHttp
      // that allows the user to press Next, Previous and even close the application using the
      // browser as if it were a remote control. Of course, since micoHttp is serving the related html
      // any device, for instance a smart phone, with access to the PC can connect to the application
      // just using its browser(*2).
      //
      // A console is included in the GUI to see the communication performed by micoHttp with the browser.
      // In general a final application will not need that but, for instance, during a development this ouput
      // might be very useful.
      //
      // (*1) using the same technique you can control from your PC an android device, raspberry pi etc
      //      if they have installed gastona.
      // (*2) from other device change "localhost" of "http://localhost:PORT" with the PC's IP, this can
      //      be obtained using ipconfig (windows) or ifconfig (linux) commands
      //

   <examples>
      gastSample

      launch arces
      launch xmelon
      mandoPictures

   <launch arces>
      //#listix#
      //
      //   <main>
      //      GAST, META-GASTONA/utilApp/arces/arces.gast

   <launch xmelon>
      //#listix#
      //
      //   <main>
      //      GAST, META-GASTONA/utilApp/xmelon/xmelon.gast

   <mandoPictures>
      //    Demonstrates how to use http communication through
      //    micoHttp command to control the host remotely.
      //
      //    Specifically this sample implements a remote control to
      //    view all images in the folder Pictures of the home directory
      //
      //#javaj#
      //
      //   <frames> F, Mando Pictures (4Windows), 600, 500
      //
      //   <layout of F>
      //      EVA, 10, 10, 6, 6
      //
      //      ---, 300   , X
      //         , bNext , mImage
      //         , bPrev , +
      //       X , oXa   , +
      //
      //#listix#
      //
      //   <FOTONR> 1
      //
      //   <main>
      //      SCAN, ADDFILES,, @<:sys user.home>/Pictures, +, png, +, gif, +, jpeg, +, jpg
      //      LOOP, SQL,, //SELECT COUNT(*) AS tope FROM scan_all;
      //          ,, NUM=, MAX_FOTONR, tope
      //
      //      micohttp, start, fotoMando
      //
      //   <-- bNext>
      //     CHECK, !=, @<FOTONR>, MAX_FOTONR
      //     NUM=, FOTONR, FOTONR + 1
      //     LSX, verFoto
      //
      //   <-- bPrev>
      //     CHECK, !=, @<FOTONR>, 1
      //     NUM=, FOTONR, FOTONR - 1
      //     LSX, verFoto
      //
      //   <verFoto>
      //     LOOP, SQL,, //SELECT fullPath FROM scan_all LIMIT @<FOTONR>, 1
      //         ,, -->, mImage data!,, @<fullPath>
      //
      //   <GET />
      //      LSX, pagina
      //
      //   <POST /next>
      //      LSX, -- bNext
      //      LSX, pagina
      //
      //   <POST /prev>
      //      LSX, -- bPrev
      //      LSX, pagina
      //
      //   <POST /open>
      //      CHECK, VAR, mImage
      //      CHECK, FILE, @<mImage>
      //      OPEN, @<mImage>
      //      LSX, pagina
      //
      //   <POST /end>
      //      micohttp, close, fotoMando
      //      MSG, javaj doExit
      //
      //   <pagina>
      //      //<html>
      //      // <style>
      //      //      * { font-size: 50px; }
      //      //      input
      //      //      {
      //      //         border: 2px solid #a1a1a1;
      //      //         padding: 5px 10px;
      //      //         background: #dddddd;
      //      //         width: 300px;
      //      //         border-radius: 25px;
      //      //         margin: 10px 10px 10px 10px;
      //      //      }
      //      //      </style>
      //      //<body>
      //      //      <form action = "/next" method = "post">  <input type="submit" name="orden" value="Next" />  </form>
      //      //      <form action = "/prev" method = "post">  <input type="submit" name="orden" value="Prev" />  </form>
      //      //      <form action = "/open" method = "post">  <input type="submit" name="orden" value="Open" />  </form>
      //      //      <form action = "/end" method = "post">   <input type="submit" name="orden" value="End" />   </form>
      //      //</body>
      //      //</html>



#**FIN_EVA#

*/
