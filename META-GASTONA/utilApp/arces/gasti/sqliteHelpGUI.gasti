#javaj#

   <layout of sqlAssist>
      EVALAYOUT, 10, 5, 5, 5
        ZZZ,    A      ,   X,
         A , radios    , -
         X , iSQLCmds  , xSQLSyntax
        100,      +    , paShortExam
         A , bSqliteOrg,   +

   <layout of paShortExam>
      EVA,  5, 5, 5, 5

           ,     X               ,   A
         A ,    lShortExamples
         A ,    iSQLCmdsExamples , bExecuteShort
         X ,       +             ,
        22 ,    eSQL2Execute     , -

   <layout of radios>
      EVA,

         ,    A       ,    A        ,   A
         , rgSqlGroups, rgImportance, rgOrder


#data#

   <rgSqlGroups orientation> X
   <rgSqlGroups titledBorder> Groups
   <rgSqlGroups>
      default, label ,  filterSql
         1   , All   ,  //(1)
             , Schema,  //(sqlgroup = 'schema')
             , Data  ,  //(sqlgroup = 'data')
             , Batch ,  //(sqlgroup = 'batch')
             , Misc  ,  //(sqlgroup = 'misc')

   <rgImportance orientation> X
   <rgImportance titledBorder> Importance
   <rgImportance>
      default, label ,  filterSql

             , All   ,  //(1)
        1    , High  ,  //(importance+0 > 6)
             , Medium,  //(importance+0 <= 6 AND importance+0 >= 4 )
             , Low   ,  //(importance+0 < 4)

   <rgOrder orientation> X
   <rgOrder titledBorder> Order by
   <rgOrder>
      default, label    , orderBy

             , Frequency, ORDER BY importance+0 DESC
         1   , Names     , ORDER BY name


   <bSqliteOrg image> images/sqlite_p22.PNG

   <bExecute>        Execute

   <bSqliteOrg>  //on line

   <iSQLCmds visibleColumns>         name
   <iSQLCmdsExamples visibleColumns> description


   <iSQLCmds dbName var>         SQLSyntax.db
   <iSQLCmdsExamples dbName var> SQLSyntax.db


#listix#

   <main>
      MSG, rgSqlGroups select!, default, 1
      MSG, rgImportance select!, default, 1
      MSG, rgOrder select!, default, 1


   <-- HELP DB READY>
      VAR=, filterSqlGroup, (1)
      VAR=, filterImportance, (importance+0 > 6)
      VAR=, orderBy, //ORDER BY importance+0 DESC
      LSX, update iSQLcmds

   <update iSQLcmds>
      -->, iSQLCmds data!, sqlSelect, //SELECT * FROM tab_sqlite_commands WHERE @<filterSqlGroup> AND @<filterImportance> @<orderBy>

   <update iSQLCmdsExamples>
      CHECK, VAR, iSQLCmds selected.name
      -->, iSQLCmdsExamples data!, sqlSelect, //SELECT * FROM tab_sqlite_examples WHERE command = '@<iSQLCmds selected.name>'

   <-- iSQLCmds>
      CHECK, VAR, iSQLCmds selected.sqliteHtmlName
      -->, xSQLSyntax data!, var, help @<iSQLCmds selected.sqliteHtmlName>
      LSX, update iSQLCmdsExamples

   <-- iSQLCmdsExamples>
      CHECK, VAR, iSQLCmdsExamples selected.command
      -->, eSQL2Execute data!,, //@<iSQLCmdsExamples selected.command> @<iSQLCmdsExamples selected.rest> ;

   <-- bSqliteOrg>
      CHECK, VAR, iSQLCmds selected.sqliteHtmlName
      IN CASE, @<iSQLCmds selected.sqliteHtmlName>
             , pragma, BROWSE, //http://www.sqlite.org/@<iSQLCmds selected.sqliteHtmlName>.html
             , ELSE  , BROWSE, //http://www.sqlite.org/lang_@<iSQLCmds selected.sqliteHtmlName>.html

   <-- rgSqlGroups>
      VAR=, filterSqlGroup, @<rgSqlGroups selected.filterSql>
      LSX, update iSQLcmds

   <-- rgImportance>
      VAR=, filterImportance, @<rgImportance selected.filterSql>
      LSX, update iSQLcmds

   <-- rgOrder>
      VAR=, orderBy, @<rgOrder selected.orderBy>
      LSX, update iSQLcmds

   <-- bExecuteShort>
      DATABASE, @<eDBName>, EXECUTE, @<eSQL2Execute>
      LSX, update mainDatabase
